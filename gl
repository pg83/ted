#!/usr/bin/env python3

import sys
import string

import freetype

import OpenGL

OpenGL.ERROR_CHECKING = False

import OpenGL.GL as gl
import OpenGL.GLU as glu
import OpenGL.GLUT as glut


class Glyph:
    def __init__(self, w, h, l, t, b):
        self.w = w
        self.h = h
        self.l = l
        self.t = t
        self.b = b

        print(len(b), w, h)
        assert len(b) == w * h

    def scale(self, scale):
        #return self

        b = []

        y = 0

        def idx(x, y):
            if x >= self.w:
                return 0

            if y >= self.h:
                return 0

            return self.b[x + y * self.w]

        for y in range(0, self.h, scale):
            for x in range(0, self.w, scale):
                s = 0
                c = 0

                for j in range(0, scale):
                    for i in range(0, scale):
                        if idx(x + i, y + j) > 0:
                            s += 1

                        c += 1

                b.append(s / c)

        return Glyph((scale - 1 + self.w) // scale, (scale - 1 + self.h) // scale, self.l / scale, self.t / scale, b)


class Font:
    def __init__(self, path, size):
        fn = freetype.Face(path)

        fn.set_pixel_sizes(0, size)

        b = {}
        c = {}

        for ch, idx in fn.get_chars():
            c[ch] = idx

        for idx in sorted(frozenset(c.values())):
            fn.load_glyph(idx, freetype.FT_LOAD_RENDER)

            gf = fn.glyph
            bm = gf.bitmap

            b[idx] = Glyph(bm.width, bm.rows, gf.bitmap_left, gf.bitmap_top, [x / 255.0 for x in bm.buffer])

        self.b = b
        self.c = c
        self.w = b[c[0x2500]].w
        self.h = b[c[0x2502]].h


class FontTexture:
    def __init__(self, f):
        t = {}

        for idx, b in f.b.items():
            t[idx] = gl.glGenTextures(1)

            gl.glBindTexture(gl.GL_TEXTURE_2D, t[idx])

            def iter_pixels():
                for x in b.b:
                    yield 1.0
                    yield 1.0
                    yield 1.0
                    yield x

            gl.glTexImage2D(
                gl.GL_TEXTURE_2D,
                0,
                4,
                b.w,
                b.h,
                0,
                gl.GL_RGBA,
                gl.GL_FLOAT,
                list(iter_pixels()),
            )

            gl.glTexParameteri(gl.GL_TEXTURE_2D, gl.GL_TEXTURE_MIN_FILTER, gl.GL_NEAREST)
            gl.glTexParameteri(gl.GL_TEXTURE_2D, gl.GL_TEXTURE_MAG_FILTER, gl.GL_NEAREST)

        gl.glBindTexture(gl.GL_TEXTURE_2D, 0)

        self.f = f
        self.t = t

    def texture_id(self, ch):
        return self.t[self.f.c[ord(ch)]]

    def char_glyph(self, ch):
        return self.f.b[self.f.c[ord(ch)]]


class Ted(dict):
    def __init__(self):
        self.__dict__ = self
        self.__name__ = 'ted'
        exec(open('./ted').read().encode(), self, self)


ted = Ted()


class Window:
    def __init__(self, w, h, t):
        self.w = w
        self.h = h

        glut.glutInitWindowSize(self.w, self.h)
        self.c = glut.glutCreateWindow(t)
        glut.glutReshapeFunc(self.reshape)
        glut.glutDisplayFunc(self.display)
        glut.glutKeyboardFunc(self.keyboard)
        glut.glutSpecialFunc(self.special)

    def keyboard(self, k, x, y):
        self.on_keyboard(k, x, y)

    def special(self, k, x, y):
        self.on_special(k, x, y)

    def reshape(self, w, h):
        self.w = w
        self.h = h

        gl.glViewport(0, 0, self.w, self.h)
        gl.glMatrixMode(gl.GL_PROJECTION)
        gl.glLoadIdentity()
        glu.gluOrtho2D(0, self.w, 0, self.h)
        gl.glMatrixMode(gl.GL_MODELVIEW)
        gl.glLoadIdentity()

        self.on_reshape()

    def display(self):
        gl.glEnable(gl.GL_BLEND)
        gl.glEnable(gl.GL_TEXTURE_2D)
        gl.glEnable(gl.GL_MULTISAMPLE)
        gl.glBlendFunc(gl.GL_SRC_ALPHA, gl.GL_ONE_MINUS_SRC_ALPHA)
        gl.glClearColor(0.0, 0.0, 0.0, 0.0)
        gl.glClear(gl.GL_COLOR_BUFFER_BIT)
        self.on_render()
        glut.glutSwapBuffers()

    def on_reshape(self):
        pass

    def on_render(self):
        pass

    def on_keyboard(self, k, x, y):
        pass

    def on_special(self, k, x, y):
        pass

    def title(self, t):
        pass


KEYS = {
    glut.GLUT_KEY_RIGHT: 'right',
    glut.GLUT_KEY_DOWN: 'down',
    glut.GLUT_KEY_LEFT: 'left',
    glut.GLUT_KEY_END: 'end',
    glut.GLUT_KEY_UP: 'up',
    glut.GLUT_KEY_F1: 'f1',
    glut.GLUT_KEY_F2: 'f2',
    glut.GLUT_KEY_F3: 'f3',
    glut.GLUT_KEY_F4: 'f4',
    glut.GLUT_KEY_F5: 'f5',
    glut.GLUT_KEY_F6: 'f6',
    glut.GLUT_KEY_F7: 'f7',
    glut.GLUT_KEY_F8: 'f8',
    glut.GLUT_KEY_F9: 'f9',
    glut.GLUT_KEY_F10: 'f10',
    glut.GLUT_KEY_F11: 'f11',
    glut.GLUT_KEY_F12: 'f12',
    glut.GLUT_KEY_HOME: 'home',
    glut.GLUT_KEY_INSERT: 'insert',
    glut.GLUT_KEY_PAGE_UP: 'pageup',
    glut.GLUT_KEY_PAGE_DOWN: 'pagedown',
}


ASCII = dict(
    [(n + 1, f'ctrl-{ch}') for n, ch in enumerate(string.ascii_lowercase)] + [
        (0,   'ctrl-space'),
        (8,   'bs'),
        (9,   'tab'),
        (10,  'lf'),
        (13,  'cr'),
        (27,  'escape'),
        (127, 'bs'),
    ]
)


class Display(Window):
    def __init__(self, w):
        self.font = Font('/Users/pg83/input.ttf', 25)
        Window.__init__(self, self.fw * 80, self.fh * 24, 'display')
        self.ft = FontTexture(self.font)
        self.widget = w
        self.keybuf = []

    def on_key(self, k):
        mod = glut.glutGetModifiers()

        if len(k) == 1:
            k = ASCII.get(ord(k), k)

        if mod & glut.GLUT_ACTIVE_CTRL:
            k = 'ctrl-' + k

        if mod & glut.GLUT_ACTIVE_ALT:
            k = 'alt-' + k

        k = k.replace('ctrl-ctrl', 'ctrl')

        try:
            if len(k) > 1:
                self.widget.dispatch({'t': 'k', 'v': k})
            else:
                self.widget.dispatch({'t': 'c', 'v': k})
        except KeyboardInterrupt:
            sys.exit(0)

        glut.glutPostRedisplay()

    def on_keyboard(self, k, x, y):
        for x in k:
            self.keybuf.append(x)

            try:
                self.on_key(bytes(self.keybuf).decode())
                self.keybuf = []
            except UnicodeError:
                pass

    def on_special(self, k, x, y):
        self.on_key(KEYS[k])

    def on_reshape(self):
        self.widget.reshape(self)

    def on_render(self):
        #gl.glColor3f(1.0, 1.0, 1.0)

        s = {}

        dx = self.dx
        dy = self.dy

        for x, y, a in self.widget.pixels(dict(focus=True)):
            k = (dy - y - 1, x)

            if k in s:
                s[k] = a.combine(s[k])
            else:
                s[k] = a

        fw = self.fw
        fh = self.fh

        ox = self.ox
        oy = self.oy

        for k in sorted(s):
            a = s[k]

            ch = a.t[0]
            r, g, b = a.t[1].rgb()

            if ch == ' ':
                if r == 0 and g == 0 and b == 0:
                    continue

            y, x = k

            tid = self.ft.texture_id(ch)
            glf = self.ft.char_glyph(ch)

            x1 = ox + x * fw
            x2 = x1 + fw
            y1 = oy + y * fh
            y2 = y1 + fh

            gl.glBegin(gl.GL_QUADS)
            gl.glColor3f(r / 255.0, g / 255.0, b / 255.0)
            gl.glVertex2f(x1, y1)
            gl.glVertex2f(x2, y1)
            gl.glVertex2f(x2, y2)
            gl.glVertex2f(x1, y2)
            gl.glEnd()

            x1 = ox + x * fw + glf.l
            x2 = x1 + glf.w
            y2 = oy + y * fh + glf.t
            y1 = y2 - glf.h

            gl.glBindTexture(gl.GL_TEXTURE_2D, tid)
            gl.glBegin(gl.GL_QUADS)

            tr, tg, tb = a.t[2].rgb()

            gl.glColor3f(tr / 255.0, tg / 255.0, tb / 255.0)
            gl.glTexCoord(0.0, 1.0)
            gl.glVertex2f(x1, y1)
            gl.glTexCoord(1.0, 1.0)
            gl.glVertex2f(x2, y1)
            gl.glTexCoord(1.0, 0.0)
            gl.glVertex2f(x2, y2)
            gl.glTexCoord(0.0, 0.0)
            gl.glVertex2f(x1, y2)
            gl.glEnd()
            gl.glBindTexture(gl.GL_TEXTURE_2D, 0)

    @property
    def fw(self):
        return self.font.w - 2

    @property
    def fh(self):
        return self.font.h

    @property
    def dx(self):
        return self.w // self.fw

    @property
    def dy(self):
        return self.h // self.fh

    @property
    def ox(self):
        return (self.w % self.fw) // 2

    @property
    def oy(self):
        fh = self.fh

        return (self.h % fh + fh) // 2


class EventLoop:
    def __init__(self):
        glut.glutInit(sys.argv)
        glut.glutInitDisplayMode(glut.GLUT_DOUBLE | glut.GLUT_RGBA)

    def fini(self):
        pass

    def event_loop(self, w):
        d = Display(w)
        glut.glutMainLoop()


if __name__ == '__main__':
    ted.main(sys.argv[1], EventLoop)
